//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/Input/MovimientoDeLaNave.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @MovimientoDeLaNave: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @MovimientoDeLaNave()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""MovimientoDeLaNave"",
    ""maps"": [
        {
            ""name"": ""Nave"",
            ""id"": ""05922258-74db-4211-baee-a4f8e6bb79a1"",
            ""actions"": [
                {
                    ""name"": ""Movimiento"",
                    ""type"": ""Value"",
                    ""id"": ""0c4b4bd8-dbbd-4c90-8d05-7ffb4dd503de"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""5f5eba13-3e1b-48bc-94da-fc0cfbc506d9"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movimiento"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""d4a4b2e6-8de0-4705-a6e8-4f56875c3020"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movimiento"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""840b1cb5-33ba-451e-afcf-5146caf43abd"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movimiento"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""564856c9-be5e-4f43-885a-b4e7159f8a1a"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movimiento"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""d2ee7e0a-12c6-4604-b914-08d85bd20c0b"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movimiento"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Nave
        m_Nave = asset.FindActionMap("Nave", throwIfNotFound: true);
        m_Nave_Movimiento = m_Nave.FindAction("Movimiento", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Nave
    private readonly InputActionMap m_Nave;
    private List<INaveActions> m_NaveActionsCallbackInterfaces = new List<INaveActions>();
    private readonly InputAction m_Nave_Movimiento;
    public struct NaveActions
    {
        private @MovimientoDeLaNave m_Wrapper;
        public NaveActions(@MovimientoDeLaNave wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movimiento => m_Wrapper.m_Nave_Movimiento;
        public InputActionMap Get() { return m_Wrapper.m_Nave; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(NaveActions set) { return set.Get(); }
        public void AddCallbacks(INaveActions instance)
        {
            if (instance == null || m_Wrapper.m_NaveActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_NaveActionsCallbackInterfaces.Add(instance);
            @Movimiento.started += instance.OnMovimiento;
            @Movimiento.performed += instance.OnMovimiento;
            @Movimiento.canceled += instance.OnMovimiento;
        }

        private void UnregisterCallbacks(INaveActions instance)
        {
            @Movimiento.started -= instance.OnMovimiento;
            @Movimiento.performed -= instance.OnMovimiento;
            @Movimiento.canceled -= instance.OnMovimiento;
        }

        public void RemoveCallbacks(INaveActions instance)
        {
            if (m_Wrapper.m_NaveActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(INaveActions instance)
        {
            foreach (var item in m_Wrapper.m_NaveActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_NaveActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public NaveActions @Nave => new NaveActions(this);
    public interface INaveActions
    {
        void OnMovimiento(InputAction.CallbackContext context);
    }
}
